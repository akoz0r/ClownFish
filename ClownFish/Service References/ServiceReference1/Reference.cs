//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClownFish.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChessGameService", CallbackContract=typeof(ClownFish.ServiceReference1.IChessGameServiceCallback))]
    public interface IChessGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/GetGames", ReplyAction="http://tempuri.org/IChessGameService/GetGamesResponse")]
        GameServerInterfaces.ChessGameDTO[] GetGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/GetGames", ReplyAction="http://tempuri.org/IChessGameService/GetGamesResponse")]
        System.Threading.Tasks.Task<GameServerInterfaces.ChessGameDTO[]> GetGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/CreateGame", ReplyAction="http://tempuri.org/IChessGameService/CreateGameResponse")]
        GameServerInterfaces.ChessGameDTO CreateGame(string playerName, GameServerInterfaces.Enums.ColorEnum ownColorEnum, System.TimeSpan startTimePerPlayer, System.TimeSpan extraTimePerMove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/CreateGame", ReplyAction="http://tempuri.org/IChessGameService/CreateGameResponse")]
        System.Threading.Tasks.Task<GameServerInterfaces.ChessGameDTO> CreateGameAsync(string playerName, GameServerInterfaces.Enums.ColorEnum ownColorEnum, System.TimeSpan startTimePerPlayer, System.TimeSpan extraTimePerMove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/Subscribe", ReplyAction="http://tempuri.org/IChessGameService/SubscribeResponse")]
        void Subscribe(string gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/Subscribe", ReplyAction="http://tempuri.org/IChessGameService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/JoinGame", ReplyAction="http://tempuri.org/IChessGameService/JoinGameResponse")]
        bool JoinGame(string gameID, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/JoinGame", ReplyAction="http://tempuri.org/IChessGameService/JoinGameResponse")]
        System.Threading.Tasks.Task<bool> JoinGameAsync(string gameID, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/MakeMove", ReplyAction="http://tempuri.org/IChessGameService/MakeMoveResponse")]
        bool MakeMove(string gameID, GameServerInterfaces.GameMoveDTO moveDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/MakeMove", ReplyAction="http://tempuri.org/IChessGameService/MakeMoveResponse")]
        System.Threading.Tasks.Task<bool> MakeMoveAsync(string gameID, GameServerInterfaces.GameMoveDTO moveDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChessGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessGameService/GameStateChanged", ReplyAction="http://tempuri.org/IChessGameService/GameStateChangedResponse")]
        void GameStateChanged(GameServerInterfaces.GameMoveDTO latestMove, GameServerInterfaces.ChessGameDTO gameState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChessGameServiceChannel : ClownFish.ServiceReference1.IChessGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChessGameServiceClient : System.ServiceModel.DuplexClientBase<ClownFish.ServiceReference1.IChessGameService>, ClownFish.ServiceReference1.IChessGameService {
        
        public ChessGameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChessGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChessGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChessGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChessGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public GameServerInterfaces.ChessGameDTO[] GetGames() {
            return base.Channel.GetGames();
        }
        
        public System.Threading.Tasks.Task<GameServerInterfaces.ChessGameDTO[]> GetGamesAsync() {
            return base.Channel.GetGamesAsync();
        }
        
        public GameServerInterfaces.ChessGameDTO CreateGame(string playerName, GameServerInterfaces.Enums.ColorEnum ownColorEnum, System.TimeSpan startTimePerPlayer, System.TimeSpan extraTimePerMove) {
            return base.Channel.CreateGame(playerName, ownColorEnum, startTimePerPlayer, extraTimePerMove);
        }
        
        public System.Threading.Tasks.Task<GameServerInterfaces.ChessGameDTO> CreateGameAsync(string playerName, GameServerInterfaces.Enums.ColorEnum ownColorEnum, System.TimeSpan startTimePerPlayer, System.TimeSpan extraTimePerMove) {
            return base.Channel.CreateGameAsync(playerName, ownColorEnum, startTimePerPlayer, extraTimePerMove);
        }
        
        public void Subscribe(string gameID) {
            base.Channel.Subscribe(gameID);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string gameID) {
            return base.Channel.SubscribeAsync(gameID);
        }
        
        public bool JoinGame(string gameID, string playerName) {
            return base.Channel.JoinGame(gameID, playerName);
        }
        
        public System.Threading.Tasks.Task<bool> JoinGameAsync(string gameID, string playerName) {
            return base.Channel.JoinGameAsync(gameID, playerName);
        }
        
        public bool MakeMove(string gameID, GameServerInterfaces.GameMoveDTO moveDTO) {
            return base.Channel.MakeMove(gameID, moveDTO);
        }
        
        public System.Threading.Tasks.Task<bool> MakeMoveAsync(string gameID, GameServerInterfaces.GameMoveDTO moveDTO) {
            return base.Channel.MakeMoveAsync(gameID, moveDTO);
        }
    }
}
